// Utility Color Classes
// Google Color Palette defined: http://www.google.com/design/spec/style/color.html


$mozu-red:     #df3018;
$black:        #12191A;
$white:        #FFFFFF;
$trans-white:  rgba(255, 255, 255, 0.85);
$transparent:  transparent;

$red: (
  "lighten-5":  #fbeae7,
  "lighten-4":  #f5c0b9,
  "lighten-3":  #ef978b,
  "lighten-2":  #e86e5d,
  "lighten-1":  #e2442f,
  "base":       $mozu-red,
  "darken-1":   #b22613,
  "darken-2":   #851c0e,
  "darken-3":   #591309,
  "darken-4":   #2c0904
);

$grey: (
  "lighten-2":  #eef0f0,
  "lighten-1":  #e8e8e8,
  "base":       #bbbebf,
  "darken-1":   #727779,
  "darken-2":   #3f4243,
  "darken-3":   #1d2021
);

$shades: (
  "black":        $black,
  "white":        $white
);

$transparent-shades: (
  "trans-white":  $trans-white,
  "transparent":  $transparent
);

$colors: (
  "red": $red,
  "grey": $grey,
  "shades": $shades
);


// Color Classes

@each $color_name, $color in $colors {
  @each $color_type, $color_value in $color {
    @if $color_type == "base" {
      .#{$color_name} {
        background-color: $color_value !important;
      }
      .text-#{$color_name} {
        color: $color_value !important;
      }
      .border-#{$color_name} {
        border-color: $color_value !important;
      }
      .btn.#{$color_name}:hover {
        background-color: darken( $color_value, 7% ) !important;
      }
      .btn.text-#{$color_name}:hover {
        color: darken( $color_value, 15% ) !important;
      }
      .btn.border-#{$color_name}:hover {
        border-color: darken( $color_value, 15% ) !important;
      }
      a.text-#{$color_name}:hover {
        color: lighten( $color_value, 10% ) !important;
      }
    }
    @else {
      .#{$color_name}.#{$color_type} {
        background-color: $color_value !important;
      }
      .text-#{$color_name}.text-#{$color_type} {
        color: $color_value !important;
      }
      .border-#{$color_name}.border-#{$color_type} {
        border-color: $color_value !important;
      }
    }
  }
}

// Shade classes
@each $color, $color_value in $shades {
  .#{$color} {
    background-color: $color_value !important;
  }
  .text-#{$color} {
    color: $color_value !important;
  }
  .border-#{$color} {
    border-color: $color_value !important;
  }
  .btn.border-#{$color} {
    border-color: $color_value!important;
  }
  .btn.border-#{$color}:hover {
    border-color: rgba($color_value, 0.3)!important;
  }
  .btn.text-#{$color} {
    color: $color_value!important;
  }
  .btn.text-#{$color}:hover {
    color: $color_value!important;
    opacity: 1;
  }
  .btn.#{$color} {
    background-color: $color_value!important;
  }
  .btn.#{$color}:hover {
    background-color: rgba($color_value, 0.7)!important;
  }
}

// Transparent Classes
@each $color, $color_value in $transparent-shades {
  .#{$color} {
    background-color: $color_value !important;
  }
  .text-#{$color} {
    color: $color_value !important;
  }
  .border-#{$color} {
    border-color: $color_value !important;
  }
}

// usage: color("name_of_color", "type_of_color")
// to avoid to repeating map-get($colors, ...)

@function color($color, $type) {
  @if map-has-key($colors, $color) {
    $curr_color: map-get($colors, $color);
    @if map-has-key($curr_color, $type) {
      @return map-get($curr_color, $type);
    }
  }
  @warn "Unknown `#{name}` in $colors.";
  @return null;
}

// Borders
.border,
[class^="border-"],
[class*=' border-'] {
  border-style: solid!important;
  border-width: 1px!important;
}
.border-none {border-width: 0px 0px 0px 0px!important;}
.border-top {border-width: 1px 0px 0px 0px!important;}
.border-right {border-width: 0px 1px 0px 0px!important;}
.border-bottom {border-width: 0px 0px 1px 0px!important;}
.border-left {border-width: 0px 0px 0px 1px!important;}